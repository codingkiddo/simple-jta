/*
 * SimpleJTA - A Simple Java Transaction Manager (http://www.simplejta.org/)
 * Copyright 2005 Dibyendu Majumdar
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
package org.simplejta.tm.jdbc;

import java.io.PrintWriter;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import javax.naming.Reference;
import javax.naming.Referenceable;
import javax.naming.StringRefAddr;
import javax.sql.DataSource;
import javax.transaction.SystemException;

import org.simplejta.tm.Resource;
import org.simplejta.tm.SimpleTransactionManager;
import org.simplejta.util.Messages;

/**
 * <code>SimpleXADataSource</code> implements a pooling {@link javax.sql.DataSource DataSource}, 
 * that automatically enlists new SQL connections to the current SimpleJTA global transaction
 * context. Connections are delisted automatically when the transaction completes. 
 * SimpleXADataSource provides a common implementation for all SimpleJTA DataSources. The actual type 
 * of the DataSource is specified using the <code>typeid</code> parameter. 
 * 
 * @author Dibyendu Majumdar
 * @since 15.Jan.2005
 */
public class SimpleJTADataSource implements DataSource, Serializable,
        Referenceable {

	private static final long serialVersionUID = 8721700505513430487L;

	protected final String PROP_KEY = "beanFactory";

    protected final String PROP_TMID = "transactionManager";

    protected final String PROP_TYPEID = "connectionPool";

    String beanFactory;
    
    /**
     * The id of the transaction manager responsible for managing
     * connections generated by this datasource.
     */
    protected String transactionManager;

    /**
     * The typeid identifies the ResourceFactory implementation 
     * registered in <code>simplejta.resourcefactories</code>. 
     */
    protected String connectionPool;

    /**
     * Cached ResourceFactory instance.
     */
    protected transient JDBCXAConnectionPool cachedFactory;

    /**
     * Creates an uninitialized SimpleXADataSource instance.
     */
    public SimpleJTADataSource() {
    }

    /**
     * Creates an instance of SimpleXADataSource of the specified typeid, which
     * must be a registered type in <code>simplejta.resourcesfactories</code>.
     * 
     * @param tmid
     *            The id of the transaction manager that will manage
     *            connections for this datasource
     * @param typeid
     *            The typeid of the resource factory implementation, must be one of
     *            the registered ids in <code>simplejta.resourcefactories</code>
     * @param url
     *            The URL for connecting to the database
     * @param user
     *            The database userid to be used for connections
     * @param password
     *            Password for the userid
     */
    public SimpleJTADataSource(String key, String tmid, String typeid) {
    	this.beanFactory = key;
        this.transactionManager = tmid;
        this.connectionPool = typeid;
    }

    /**
     * Primarily for use in JNDI, creates an instance of SimpleXADataSource of
     * the specified typeid using the parameters specified in the supplied list
     * of properties.
     * 
     * @param props
     *            Properties of the desired datasource.
     */
    public SimpleJTADataSource(Properties props) {
        this.beanFactory = props.getProperty(PROP_KEY);
        this.transactionManager = props.getProperty(PROP_TMID);
        this.connectionPool = props.getProperty(PROP_TYPEID);
    }

    /**
     * Returns the id of the transaction manager responsible for managing
     * connections generated by this datasource.
     * 
     * @return The id of SimpleTransactionManager
     */
    public String getTransactionManager() {
        return transactionManager;
    }

    /**
     * Returns the id of the transaction manager responsible for managing
     * connections generated by this datasource.
     * 
     * @param tmid
     *            The id of SimpleTransactionManager
     */
    public void setTransactionManager(String tmid) {
        this.transactionManager = tmid;
    }

    /**
     * Returns the typeid that identifies the ResourceFactory implementation 
     * registered in <code>simplejta.resourcefactories</code>.
     * 
     * @return The typeid that identifies the implementation.
     */
    public String getConnectionPool() {
        return connectionPool;
    }

    /**
     * Sets the typeid that identifies the ResourceFactory implementation
     * registered in <code>simplejta.resourcefactories</code>.
     * 
     * @param typeid
     *            The typeid that identifies the implementation.
     */
    public void setConnectionPool(String typeid) {
        this.connectionPool = typeid;
    }

    public String getBeanFactory() {
		return beanFactory;
	}

	public void setBeanFactory(String key) {
		this.beanFactory = key;
	}

	/**
     * Obtains a SQL Connection from the datasource, enlisting the connection to
     * currently active SimpleJTA global transaction. It is an error if there is 
     * no global transaction currently active.
     */
    public Connection getConnection() throws SQLException {
        if (transactionManager == null || connectionPool == null) {
            throw new SQLException(Messages.EINITDS);
        }
        try {
            return getCachedFactory().getConnection();
        } catch (SQLException e) {
            throw e;
        } catch (Exception ex) {
            throw (SQLException) new SQLException(Messages.EOPENCONN)
                    .initCause(ex);
        }
    }

    /**
     * Obtains SQL Connection from the datasource, enlisting the connection with
     * currently active SimpleJTA global transaction. The supplied userid and password
     * overrides the userid and password registered for the datasource. It is an error 
     * if there is no global transaction currently active.
     */
    public Connection getConnection(String usr, String pwd)
            throws SQLException {
        if (transactionManager == null || connectionPool == null) {
            throw new SQLException(Messages.EINITDS);
        }
        return getConnection();
    }

    /**
     * Retrieves a ResourceFactory of the typeid associated with the datasource.
     * The ResourceFactory will be managed by the SimpleTransactionManager instance 
     * associated with this datasource. 
     * 
     * @return ResourceFactory implementation for our typeid
     * @throws SystemException if there was a problem retrieving the ResourceFactory
     */
    private JDBCXAConnectionPool getFactory() throws SystemException {
        JDBCXAConnectionPool factory;
        SimpleTransactionManager tm = SimpleTransactionManager
                .getTransactionManager(beanFactory, transactionManager);
        try {
            factory = (JDBCXAConnectionPool) tm.getResourceFactory(
                    getConnectionPool());
        } catch (Exception ex) {
            throw (SystemException) new SystemException().initCause(ex);
        }
        return factory;
    }

    /**
     * Retrieves a cached copy of the ResourceFactory.
     * 
     * @return ResourceFactory implementation for our typeid
     * @throws SystemException if there was a problem retrieving the ResourceFactory
     * @see #getFactory
     */
    private synchronized JDBCXAConnectionPool getCachedFactory()
            throws SystemException {
        if (cachedFactory == null) {
            cachedFactory = getFactory();
        }
        return cachedFactory;
    }

    /**
     * Obtains an Resource instance from the datasource. The caller is expected
     * to manage transaction association, and must also manage any pooling of 
     * resources. This method is for internal use by SimpleJTA, and is not meant
     * to be called by users.
     * 
     * @return A Resource instance for the datasource
     * @throws IllegalStateException
     * @throws SQLException
     * @throws SystemException
     * @see org.simplejta.tm.Resource Resource
     */
    public Resource getResource() throws IllegalStateException, SQLException,
            SystemException {
        if (transactionManager == null || connectionPool == null) {
            throw new SQLException(Messages.EINITDS);
        }
        return getCachedFactory().getResource();
    }

    /**
     * Not implemented.
     */
    public PrintWriter getLogWriter() throws SQLException {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * Not implemented.
     */
    public int getLoginTimeout() throws SQLException {
        // TODO Auto-generated method stub
        return 0;
    }

    /**
     * Not implemented.
     */
    public void setLogWriter(PrintWriter arg0) throws SQLException {
        // TODO Auto-generated method stub
    }

    /**
     * Not implemented.
     */
    public void setLoginTimeout(int arg0) throws SQLException {
        // TODO Auto-generated method stub
    }

    /**
     * Returns a JNDI Reference for the datasource.
     */
    public Reference getReference() {
        Reference ref = new Reference(getClass().getName(),
                SimpleJTADataSourceFactory.class.getName(), null);
        ref.add(new StringRefAddr(PROP_KEY, beanFactory));
        ref.add(new StringRefAddr(PROP_TMID, transactionManager));
        ref.add(new StringRefAddr(PROP_TYPEID, connectionPool));
        ref.add(new StringRefAddr("className", getClass().getName()));
        return ref;
    }

}